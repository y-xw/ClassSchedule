package com.mnnyang.gzuclassschedule.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mnnyang.gzuclassschedule.data.beanv2.CourseGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_GROUP".
*/
public class CourseGroupDao extends AbstractDao<CourseGroup, Long> {

    public static final String TABLENAME = "COURSE_GROUP";

    /**
     * Properties of entity CourseGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CgId = new Property(0, Long.class, "cgId", true, "_id");
        public final static Property CgName = new Property(1, String.class, "cgName", false, "CG_NAME");
        public final static Property CgSchool = new Property(2, String.class, "cgSchool", false, "CG_SCHOOL");
    }

    private DaoSession daoSession;


    public CourseGroupDao(DaoConfig config) {
        super(config);
    }
    
    public CourseGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_GROUP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: cgId
                "\"CG_NAME\" TEXT," + // 1: cgName
                "\"CG_SCHOOL\" TEXT);"); // 2: cgSchool
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_GROUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseGroup entity) {
        stmt.clearBindings();
 
        Long cgId = entity.getCgId();
        if (cgId != null) {
            stmt.bindLong(1, cgId);
        }
 
        String cgName = entity.getCgName();
        if (cgName != null) {
            stmt.bindString(2, cgName);
        }
 
        String cgSchool = entity.getCgSchool();
        if (cgSchool != null) {
            stmt.bindString(3, cgSchool);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseGroup entity) {
        stmt.clearBindings();
 
        Long cgId = entity.getCgId();
        if (cgId != null) {
            stmt.bindLong(1, cgId);
        }
 
        String cgName = entity.getCgName();
        if (cgName != null) {
            stmt.bindString(2, cgName);
        }
 
        String cgSchool = entity.getCgSchool();
        if (cgSchool != null) {
            stmt.bindString(3, cgSchool);
        }
    }

    @Override
    protected final void attachEntity(CourseGroup entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CourseGroup readEntity(Cursor cursor, int offset) {
        CourseGroup entity = new CourseGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cgId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cgName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // cgSchool
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseGroup entity, int offset) {
        entity.setCgId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCgName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCgSchool(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CourseGroup entity, long rowId) {
        entity.setCgId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CourseGroup entity) {
        if(entity != null) {
            return entity.getCgId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CourseGroup entity) {
        return entity.getCgId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
